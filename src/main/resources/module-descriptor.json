{"name":"module-kafka","displayName":"module-kafka","version":"1.0.4-SNAPSHOT","components":[{"hidden":false,"displayName":"Kafka Topic Consumer","description":"Kafka Topic Consumer","fullyQualifiedName":"com.reedelk.kafka.component.KafkaConsumer","type":"INBOUND","output":{"description":"KafkaConsumer Output description","dynamicPropertyName":"","payload":["java.lang.String"],"attributes":["com.reedelk.kafka.internal.attribute.KafkaConsumerAttributes"]},"properties":[{"mandatory":false,"name":"configuration","initValue":"###USE_DEFAULT_VALUE###","displayName":"Connection","type":{"classname":"com.reedelk.module.descriptor.model.property.ObjectDescriptor","instance":{"shared":"YES","dialogTitle":"Kafka Consumer Configuration","collapsible":"NO","typeFullyQualifiedName":"com.reedelk.kafka.component.KafkaConsumerConfiguration","objectProperties":[{"mandatory":false,"name":"bootstrapServers","example":"localhost:9092","initValue":"localhost:9092","hintValue":"localhost:9092","description":"\"A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping\u0026mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form \"\n                                                       + \"\u003ccode\u003ehost1:port1,host2:port2,...\u003c/code\u003e. Since these servers are just used for the initial connection to \"\n                                                       + \"discover the full cluster membership (which may change dynamically), this list need not contain the full set of \"\n                                                       + \"servers (you may want more than one, though, in case a server is down).\"","displayName":"Bootstrap Servers","defaultValue":"localhost:9092","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.String"}},"whens":[]},{"mandatory":false,"name":"groupId","example":"test","initValue":"###USE_DEFAULT_VALUE###","hintValue":"test","description":"A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using \u003ccode\u003esubscribe(topic)\u003c/code\u003e or the Kafka-based offset management strategy.","displayName":"Group ID","defaultValue":"test","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.String"}},"whens":[]},{"mandatory":false,"name":"keyDeserializer","initValue":"STRING","description":"The deserializer type to be used for the Kafka record key","displayName":"Key Deserializer","defaultValue":"STRING","type":{"classname":"com.reedelk.module.descriptor.model.property.EnumDescriptor","instance":{"nameAndDisplayNameMap":{"FLOAT":"Float","BYTE_ARRAY":"Byte Array","STRING":"String","DOUBLE":"Double","UUID":"UUID","VOID":"Void","INTEGER":"Integer","LONG":"Long","SHORT":"Short"},"type":"java.lang.Enum"}},"whens":[]},{"mandatory":false,"name":"valueDeserializer","initValue":"STRING","description":"The deserializer type to be used for the Kafka record value","displayName":"Value Deserializer","defaultValue":"STRING","type":{"classname":"com.reedelk.module.descriptor.model.property.EnumDescriptor","instance":{"nameAndDisplayNameMap":{"FLOAT":"Float","BYTE_ARRAY":"Byte Array","STRING":"String","DOUBLE":"Double","UUID":"UUID","VOID":"Void","INTEGER":"Integer","LONG":"Long","SHORT":"Short"},"type":"java.lang.Enum"}},"whens":[]},{"mandatory":false,"name":"enableAutoCommit","example":"false","initValue":"true","description":"If true the consumer\u0027s offset will be periodically committed in the background.","displayName":"Enable Auto Commit","defaultValue":"false","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.Boolean"}},"whens":[]},{"mandatory":false,"name":"autoCommitInterval","example":"1500","initValue":"1000","hintValue":"1000","description":"The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if \u003ccode\u003eenable.auto.commit\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e.","displayName":"Auto Commit Interval (ms)","defaultValue":"1000","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.Integer"}},"whens":[]}],"type":"com.reedelk.module.descriptor.model.property.ObjectDescriptor$TypeObject"}},"whens":[]},{"mandatory":false,"name":"topics","initValue":"###USE_DEFAULT_VALUE###","description":"List of topics to subscribe for","displayName":"Consumer Subscription Topics","type":{"classname":"com.reedelk.module.descriptor.model.property.ListDescriptor","instance":{"valueType":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.String"}},"tabGroup":"Topics","type":"java.util.List"}},"whens":[]},{"mandatory":false,"name":"pollTimeout","group":"Advanced","example":"500","initValue":"###USE_DEFAULT_VALUE###","hintValue":"100","description":"The maximum time to block before the next poll in milliseconds","displayName":"Poll timeout (ms)","defaultValue":"100","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.Integer"}},"whens":[]}]},{"hidden":false,"displayName":"KafkaTopicProducer","description":"KafkaTopicProducer description","fullyQualifiedName":"com.reedelk.kafka.component.KafkaProducer","type":"PROCESSOR","input":{"description":"KafkaTopicProducer Input description","payload":["java.lang.Object"]},"output":{"description":"KafkaTopicProducer Output description","dynamicPropertyName":"","payload":["java.lang.Object"],"attributes":["com.reedelk.runtime.api.message.MessageAttributes"]},"properties":[{"mandatory":false,"name":"configuration","initValue":"###USE_DEFAULT_VALUE###","displayName":"Connection","type":{"classname":"com.reedelk.module.descriptor.model.property.ObjectDescriptor","instance":{"shared":"YES","dialogTitle":"Kafka Producer Configuration","collapsible":"NO","typeFullyQualifiedName":"com.reedelk.kafka.component.KafkaProducerConfiguration","objectProperties":[{"mandatory":false,"name":"bootstrapServers","example":"localhost:9092","initValue":"localhost:9092","hintValue":"localhost:9092","description":"\"A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping\u0026mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form \"\n                                                       + \"\u003ccode\u003ehost1:port1,host2:port2,...\u003c/code\u003e. Since these servers are just used for the initial connection to \"\n                                                       + \"discover the full cluster membership (which may change dynamically), this list need not contain the full set of \"\n                                                       + \"servers (you may want more than one, though, in case a server is down).\"","displayName":"Bootstrap Servers","defaultValue":"localhost:9092","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.String"}},"whens":[]},{"mandatory":false,"name":"clientId","example":"client1","initValue":"###USE_DEFAULT_VALUE###","hintValue":"client1","description":"An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.","displayName":"Client Id","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.String"}},"whens":[]},{"mandatory":false,"name":"keySerializer","initValue":"STRING","description":"The serializer type to be used for the Kafka record key","displayName":"Key Serializer","defaultValue":"STRING","type":{"classname":"com.reedelk.module.descriptor.model.property.EnumDescriptor","instance":{"nameAndDisplayNameMap":{"FLOAT":"Float","BYTE_ARRAY":"Byte Array","STRING":"String","DOUBLE":"Double","UUID":"UUID","VOID":"Void","INTEGER":"Integer","LONG":"Long","SHORT":"Short"},"type":"java.lang.Enum"}},"whens":[]},{"mandatory":false,"name":"valueSerializer","initValue":"STRING","description":"The serializer type to be used for the Kafka record value","displayName":"Value Serializer","defaultValue":"STRING","type":{"classname":"com.reedelk.module.descriptor.model.property.EnumDescriptor","instance":{"nameAndDisplayNameMap":{"FLOAT":"Float","BYTE_ARRAY":"Byte Array","STRING":"String","DOUBLE":"Double","UUID":"UUID","VOID":"Void","INTEGER":"Integer","LONG":"Long","SHORT":"Short"},"type":"java.lang.Enum"}},"whens":[]}],"type":"com.reedelk.module.descriptor.model.property.ObjectDescriptor$TypeObject"}},"whens":[]},{"mandatory":false,"name":"topic","initValue":"###USE_DEFAULT_VALUE###","description":"List of topics to subscribe for","displayName":"Producer Topics","type":{"classname":"com.reedelk.module.descriptor.model.property.PrimitiveDescriptor","instance":{"type":"java.lang.String"}},"whens":[]}]}],"types":[{"global":false,"type":"com.reedelk.kafka.internal.attribute.KafkaConsumerAttributes","extendsType":"com.reedelk.runtime.api.message.MessageAttributes","description":"","mapKeyType":"java.lang.Object","mapValueType":"java.lang.Object","functions":[],"properties":[{"name":"key","type":"java.lang.String","example":"","description":""},{"name":"topic","type":"java.lang.String","example":"","description":""},{"name":"offset","type":"long","example":"","description":""},{"name":"timestamp","type":"long","example":"","description":""},{"name":"envelope","type":"int","example":"","description":""}]},{"global":false,"type":"com.reedelk.kafka.internal.attribute.KafkaProducerAttributes","extendsType":"com.reedelk.runtime.api.message.MessageAttributes","description":"","mapKeyType":"java.lang.Object","mapValueType":"java.lang.Object","functions":[],"properties":[{"name":"timestamp","type":"long","example":"","description":""},{"name":"envelope","type":"int","example":"","description":""},{"name":"topic","type":"java.lang.String","example":"","description":""}]},{"global":false,"type":"com.reedelk.kafka.internal.type.KafkaRecord","extendsType":"java.util.HashMap","description":"","mapKeyType":"java.lang.String","mapValueType":"java.lang.Object","functions":[],"properties":[]}]}